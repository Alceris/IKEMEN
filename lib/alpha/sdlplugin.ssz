
lib th = <thread.ssz>;

plugin void End(::)                         = "dll/sdlplugin.dll";
plugin bool PollEvent(:&Event=:)            = "dll/sdlplugin.dll";

public char getLastChar()
{
  plugin char GetLastChar(::) = "dll/sdlplugin.dll";
  ret GetLastChar(::);
}

plugin bool KeyState(:|SDLKey:)             = "dll/sdlplugin.dll";
plugin bool JoystickButtonState(:int, int:) = "dll/sdlplugin.dll";
plugin void Delay(:uint:)                   = "dll/sdlplugin.dll";
plugin uint GetTicks(::)                    = "dll/sdlplugin.dll";

const int SNDFREQ = 44100;
const index SNDBUFLEN = 4096;

public bool setSndBuf(^int buf)
{
  if(#buf != .SNDBUFLEN) ret false;
  plugin bool SetSndBuf(:int=:) = "dll/sdlplugin.dll";
  ret SetSndBuf(:buf<>=:);
}

public bool playBGM(^/char pldir, ^/char fn)
{
  plugin bool PlayBGM(:^/char, ^/char:) = "dll/sdlplugin.dll";
  ret PlayBGM(:pldir, fn:);
}

public void pauseBGM(bool pause)
{
  plugin void PauseBGM(:bool:) = "dll/sdlplugin.dll";
  PauseBGM(:pause:);
}

public void setVolume(int vol)
{
  plugin void SetVolume(:int:) = "dll/sdlplugin.dll";
  SetVolume(:vol:);
}

const ubyte RELEASED = 0;
const ubyte PRESSED = 1;

const ubyte BUTTON_LEFT = 1;
const ubyte BUTTON_MIDDLE = 2;
const ubyte BUTTON_RIGHT = 3;
const ubyte BUTTON_WHEELUP = 4;
const ubyte BUTTON_WHEELDOWN = 5;

/* Event enumerations */
|EventType
{
       NOEVENT = 0,      /* Unused (do not remove) */
       ACTIVEEVENT,      /* Application loses/gains visibility */
       KEYDOWN,      /* Keys pressed */
       KEYUP,      /* Keys released */
       MOUSEMOTION,      /* Mouse moved */
       MOUSEBUTTONDOWN,    /* Mouse button pressed */
       MOUSEBUTTONUP,    /* Mouse button released */
       JOYAXISMOTION,    /* Joystick axis motion */
       JOYBALLMOTION,    /* Joystick trackball motion */
       JOYHATMOTION,    /* Joystick hat position change */
       JOYBUTTONDOWN,    /* Joystick button pressed */
       JOYBUTTONUP,      /* Joystick button released */
       QUIT,      /* User-requested quit */
       SYSWMEVENT,      /* System specific event */
       EVENT_RESERVEDA,    /* Reserved for future use.. */
       EVENT_RESERVEDB,    /* Reserved for future use.. */
       VIDEORESIZE,      /* User resized video mode */
       VIDEOEXPOSE,      /* Screen needs to be redrawn */
       EVENT_RESERVED2,    /* Reserved for future use.. */
       EVENT_RESERVED3,    /* Reserved for future use.. */
       EVENT_RESERVED4,    /* Reserved for future use.. */
       EVENT_RESERVED5,    /* Reserved for future use.. */
       EVENT_RESERVED6,    /* Reserved for future use.. */
       EVENT_RESERVED7,    /* Reserved for future use.. */
       /* Events USEREVENT through MAXEVENTS-1 are for your use */
       USEREVENT = 24,
       /* This last event is only for bounding internal arrays
    It is the number of bits in the event mask datatype -- Uint32
        */
       NUMEVENTS = 32
}

|SDLKey
{
  /* The keyboard syms have been cleverly chosen to map to ASCII */
  UNKNOWN    = 0,
  FIRST    = 0,
  BACKSPACE    = 8,
  TAB    = 9,
  CLEAR    = 12,
  RETURN    = 13,
  PAUSE    = 19,
  ESCAPE    = 27,
  SPACE    = 32,
  EXCLAIM    = 33,
  QUOTEDBL    = 34,
  HASH    = 35,
  DOLLAR    = 36,
  AMPERSAND    = 38,
  QUOTE    = 39,
  LEFTPAREN    = 40,
  RIGHTPAREN    = 41,
  ASTERISK    = 42,
  PLUS    = 43,
  COMMA    = 44,
  MINUS    = 45,
  PERIOD    = 46,
  SLASH    = 47,
  _0      = 48,
  _1      = 49,
  _2      = 50,
  _3      = 51,
  _4      = 52,
  _5      = 53,
  _6      = 54,
  _7      = 55,
  _8      = 56,
  _9      = 57,
  COLON    = 58,
  SEMICOLON    = 59,
  LESS    = 60,
  EQUALS    = 61,
  GREATER    = 62,
  QUESTION    = 63,
  AT      = 64,
  /* 
     Skip uppercase letters
   */
  LEFTBRACKET  = 91,
  BACKSLASH    = 92,
  RIGHTBRACKET  = 93,
  CARET    = 94,
  UNDERSCORE    = 95,
  BACKQUOTE    = 96,
  a      = 97,
  b      = 98,
  c      = 99,
  d      = 100,
  e      = 101,
  f      = 102,
  g      = 103,
  h      = 104,
  i      = 105,
  j      = 106,
  k      = 107,
  l      = 108,
  m      = 109,
  n      = 110,
  o      = 111,
  p      = 112,
  q      = 113,
  r      = 114,
  s      = 115,
  t      = 116,
  u      = 117,
  v      = 118,
  w      = 119,
  x      = 120,
  y      = 121,
  z      = 122,
  DELETE    = 127,
  /* End of ASCII mapped keysyms */

  /* International keyboard syms */
  WORLD_0    = 160,    /* 0xA0 */
  WORLD_1    = 161,
  WORLD_2    = 162,
  WORLD_3    = 163,
  WORLD_4    = 164,
  WORLD_5    = 165,
  WORLD_6    = 166,
  WORLD_7    = 167,
  WORLD_8    = 168,
  WORLD_9    = 169,
  WORLD_10    = 170,
  WORLD_11    = 171,
  WORLD_12    = 172,
  WORLD_13    = 173,
  WORLD_14    = 174,
  WORLD_15    = 175,
  WORLD_16    = 176,
  WORLD_17    = 177,
  WORLD_18    = 178,
  WORLD_19    = 179,
  WORLD_20    = 180,
  WORLD_21    = 181,
  WORLD_22    = 182,
  WORLD_23    = 183,
  WORLD_24    = 184,
  WORLD_25    = 185,
  WORLD_26    = 186,
  WORLD_27    = 187,
  WORLD_28    = 188,
  WORLD_29    = 189,
  WORLD_30    = 190,
  WORLD_31    = 191,
  WORLD_32    = 192,
  WORLD_33    = 193,
  WORLD_34    = 194,
  WORLD_35    = 195,
  WORLD_36    = 196,
  WORLD_37    = 197,
  WORLD_38    = 198,
  WORLD_39    = 199,
  WORLD_40    = 200,
  WORLD_41    = 201,
  WORLD_42    = 202,
  WORLD_43    = 203,
  WORLD_44    = 204,
  WORLD_45    = 205,
  WORLD_46    = 206,
  WORLD_47    = 207,
  WORLD_48    = 208,
  WORLD_49    = 209,
  WORLD_50    = 210,
  WORLD_51    = 211,
  WORLD_52    = 212,
  WORLD_53    = 213,
  WORLD_54    = 214,
  WORLD_55    = 215,
  WORLD_56    = 216,
  WORLD_57    = 217,
  WORLD_58    = 218,
  WORLD_59    = 219,
  WORLD_60    = 220,
  WORLD_61    = 221,
  WORLD_62    = 222,
  WORLD_63    = 223,
  WORLD_64    = 224,
  WORLD_65    = 225,
  WORLD_66    = 226,
  WORLD_67    = 227,
  WORLD_68    = 228,
  WORLD_69    = 229,
  WORLD_70    = 230,
  WORLD_71    = 231,
  WORLD_72    = 232,
  WORLD_73    = 233,
  WORLD_74    = 234,
  WORLD_75    = 235,
  WORLD_76    = 236,
  WORLD_77    = 237,
  WORLD_78    = 238,
  WORLD_79    = 239,
  WORLD_80    = 240,
  WORLD_81    = 241,
  WORLD_82    = 242,
  WORLD_83    = 243,
  WORLD_84    = 244,
  WORLD_85    = 245,
  WORLD_86    = 246,
  WORLD_87    = 247,
  WORLD_88    = 248,
  WORLD_89    = 249,
  WORLD_90    = 250,
  WORLD_91    = 251,
  WORLD_92    = 252,
  WORLD_93    = 253,
  WORLD_94    = 254,
  WORLD_95    = 255,    /* 0xFF */

  /* Numeric keypad */
  KP0    = 256,
  KP1    = 257,
  KP2    = 258,
  KP3    = 259,
  KP4    = 260,
  KP5    = 261,
  KP6    = 262,
  KP7    = 263,
  KP8    = 264,
  KP9    = 265,
  KP_PERIOD    = 266,
  KP_DIVIDE    = 267,
  KP_MULTIPLY  = 268,
  KP_MINUS    = 269,
  KP_PLUS    = 270,
  KP_ENTER    = 271,
  KP_EQUALS    = 272,

  /* Arrows + Home/End pad */
  UP      = 273,
  DOWN    = 274,
  RIGHT    = 275,
  LEFT    = 276,
  INSERT    = 277,
  HOME    = 278,
  END    = 279,
  PAGEUP    = 280,
  PAGEDOWN    = 281,

  /* Function keys */
  F1      = 282,
  F2      = 283,
  F3      = 284,
  F4      = 285,
  F5      = 286,
  F6      = 287,
  F7      = 288,
  F8      = 289,
  F9      = 290,
  F10    = 291,
  F11    = 292,
  F12    = 293,
  F13    = 294,
  F14    = 295,
  F15    = 296,

  /* Key state modifier keys */
  NUMLOCK    = 300,
  CAPSLOCK    = 301,
  SCROLLOCK    = 302,
  RSHIFT    = 303,
  LSHIFT    = 304,
  RCTRL    = 305,
  LCTRL    = 306,
  RALT    = 307,
  LALT    = 308,
  RMETA    = 309,
  LMETA    = 310,
  LSUPER    = 311,    /* Left "Windows" key */
  RSUPER    = 312,    /* Right "Windows" key */
  MODE    = 313,    /* "Alt Gr" key */
  COMPOSE    = 314,    /* Multi-key compose key */

  /* Miscellaneous function keys */
  HELP    = 315,
  PRINT    = 316,
  SYSREQ    = 317,
  BREAK    = 318,
  MENU    = 319,
  POWER    = 320,    /* Power Macintosh power key */
  EURO    = 321,    /* Some european keyboards */
  UNDO    = 322,    /* Atari keyboard has Undo */

  /* Add any other keys here */

  LAST
}

/* Enumeration of valid key mods (possibly OR'd together) */
|SDLMod
{
  NONE  = 0x0000,
  LSHIFT= 0x0001,
  RSHIFT= 0x0002,
  LCTRL = 0x0040,
  RCTRL = 0x0080,
  LALT  = 0x0100,
  RALT  = 0x0200,
  LMETA = 0x0400,
  RMETA = 0x0800,
  NUM   = 0x1000,
  CAPS  = 0x2000,
  MODE  = 0x4000,
  RESERVED = 0x8000
}




public &ActiveEvent
{
  public |.EventType etype = .EventType::NOEVENT;
  public ubyte gain;
  public ubyte state;
}


public &keysym
{
  public ubyte scancode;
  public |.SDLKey sym;
  public |.SDLMod mod;
  public ushort unicode;
}
public &KeyboardEvent
{
  public |.EventType etype = .EventType::NOEVENT;
  public ubyte which;
  public ubyte state;
  public &.keysym keysym;
}


public &MouseMotionEvent
{
  public |.EventType etype = .EventType::NOEVENT;
  public ubyte which;
  public ubyte state;
  public ushort x, y;
  public short xrel;
  public short yrel;
}


public &MouseButtonEvent
{
  public |.EventType etype = .EventType::NOEVENT;
  public ubyte which;
  public ubyte button;
  public ubyte state;
  public ushort x, y;
}


public &JoyAxisEvent
{
  public |.EventType etype = .EventType::NOEVENT;
  public ubyte which;
  public ubyte axis;
  public short value;
}


public &JoyBallEvent
{
  public |.EventType etype = .EventType::NOEVENT;
  public ubyte which;
  public ubyte ball;
  public short xrel;
  public short yrel;
}


public &JoyHatEvent
{
  public |.EventType etype = .EventType::NOEVENT;
  public ubyte which;
  public ubyte hat;
  public ubyte value;
}


public &JoyButtonEvent
{
  public |.EventType etype = .EventType::NOEVENT;
  public ubyte which;
  public ubyte button;
  public ubyte state;
}


public &ResizeEvent
{
  public |.EventType etype = .EventType::NOEVENT;
  public int w;
  public int h;
}


public &ExposeEvent
{
  public |.EventType etype = .EventType::NOEVENT;
}


public &QuitEvent
{
  public |.EventType etype = .EventType::NOEVENT;
}


public &UserEvent
{
  public |.EventType etype = .EventType::NOEVENT;
  public int code;
  public index data1;
  public index data2;
}


public &Event
{
  public |.EventType etype = .EventType::NOEVENT;
  public &.ActiveEvent active;
  public &.KeyboardEvent key;
  public &.MouseMotionEvent motion;
  public &.MouseButtonEvent button;
  public &.JoyAxisEvent jaxis;
  public &.JoyBallEvent jball;
  public &.JoyHatEvent jhat;
  public &.JoyButtonEvent jbutton;
  public &.ResizeEvent resize;
  public &.ExposeEvent expose;
  public &.QuitEvent quit;
  public &.UserEvent user;
}


public &Rect
{
  public short x, y;
  public ushort w, h;
  public void set(short x, short y, ushort w, ushort h)
  {
    `x = x;
    `y = y;
    `w = w;
    `h = h;
  }
}

public &Surface
{
  index sur = 0;
  delete()
  {
    `free();
  }
  public bool null()
  {
    ret `sur == 0;
  }
  public void free()
  {
    plugin void FreeSurface(:index:) = "dll/sdlplugin.dll";
    FreeSurface(:`sur:);
    `sur = 0;
  }
  public void allocSurface(int w, int h)
  {
    plugin index AllocSurface(:int, int:) = "dll/sdlplugin.dll";
    `free();
    `sur = AllocSurface(:w, h:);
  }
  public void fill(&.Rect r=, uint c)
  {
    plugin void Fill(:index, &.Rect=, uint:) = "dll/sdlplugin.dll";
    Fill(:`sur, r=, c:);
  }
  public void imgLoad(^/char fn)
  {
    plugin index IMGLoad(:^/char:) = "dll/sdlplugin.dll";
    `free();
    `sur = IMGLoad(:fn:);
  }
  public void flip()
  {
    plugin void Flip(:index:) = "dll/sdlplugin.dll";
    Flip(:`sur:);
  }
  public void setAlpha(ubyte a)
  {
    plugin void SetAlpha(:index, ubyte:) = "dll/sdlplugin.dll";
    SetAlpha(:`sur, a:);
  }
  public void blitEx(&.Rect dr=, `self src, &.Rect sr=)
  {
    plugin void BlitSurfaceEx(:
      `self, &.Rect=, `self, &.Rect=:) = "dll/sdlplugin.dll";
    BlitSurfaceEx(:src, sr=, `, dr=:);
  }
  public void blit(&.Rect dr=, `self src)
  {
    plugin void BlitSurface(:`self, `self, &.Rect=:) =
      "dll/sdlplugin.dll";
    BlitSurface(:src, `, dr=:);
  }
  public void createPaletteSurface(^ubyte img, ^uint pal, int w, int h)
  {
    plugin index CreatePaletteSurface(:ubyte=, uint=, int, int:) =
      "dll/sdlplugin.dll";
    `sur = CreatePaletteSurface(:img<>=, pal<>=, w, h:);
  }
  public void setColorKey(int key)
  {
    plugin index SetColorKey(:index, int:) = "dll/sdlplugin.dll";
    SetColorKey(:`sur, key:);
  }
  public bool renderMugenZoom(
    &.Rect dr=, float rcx, float rcy,
    ^ubyte pxl, ^uint pal, short ckey,
    &.Rect sr=, float cx, float ty, &.Rect tile=,
    float xtopscl, float xbotscl, float yscl,
    float rasterxadd, uint roto, int alpha, int rle, %byte pluginbuf=)
  {
    plugin bool RenderMugenZoom(:
      ^/ubyte, uint=, short, &.Rect=, float, float, &.Rect=,
      float, float, float, float, uint, int, `self, &.Rect=,
      float, float, int, %byte=:) = "dll/sdlplugin.dll";
    ret
      RenderMugenZoom(:
        pxl, pal<>=, ckey, sr=, cx, ty, tile=, xtopscl, xbotscl,
        yscl, rasterxadd, roto, alpha, `, dr=, rcx, rcy, rle, pluginbuf=:);
  }
}

public &Font
{
  index font = 0;
  delete()
  {
    `close();
  }
  public void close()
  {
    plugin void CloseFont(:index:) = "dll/sdlplugin.dll";
    if(`font != 0) CloseFont(:`font:);
    `font = 0;
  }
  public void open(^/char fn, int size)
  {
    plugin index OpenFont(:^/char, int:) = "dll/sdlplugin.dll";
    `close();
    `font = OpenFont(:fn, size:);
  }
  public void render(
    uint color, bool srcalpha, short x, short y, ^/char str,
    &.Surface sur)
  {
    plugin void RenderFont(:
      index, uint, bool, short, short, ^/char,
      &.Surface:) = "dll/sdlplugin.dll";
    RenderFont(:`font, color, srcalpha, x, y, str, sur:);
  }
}

public &Surface screen;

&ScreenReleaseGuard
{
  delete()
  {
    plugin void SetSurfaceNull(:&.Surface=:) = "dll/sdlplugin.dll";
    SetSurfaceNull(:.screen=:);
  }
}
&ScreenReleaseGuard srg;
/bool ogl = false;
^bool glContextBinded.new(1);
glContextBinded<> = false;


public bool init(^/char t, int w, int h, bool gl)
{
  plugin void GlInit(:&.Surface=, ^/char, int, int:) = "dll/sdlplugin.dll";
  plugin void Init(:&.Surface=, ^/char, int, int:) = "dll/sdlplugin.dll";
  branch{
  cond gl:
    GlInit(:.screen=, t, w, h:);
    .ogl = true;
    .glContextBinded<> = true;
  else:
    Init(:.screen=, t, w, h:);
  }
  ret !.screen.null();
}

public bool shareScreen(bool gl)
{
  plugin void ShareScreen(:&.Surface=:) = "dll/sdlplugin.dll";
  ShareScreen(:.screen=:);
  .ogl = gl;
  ret !.screen.null();
}

public bool fullScreen(bool full)
{
  plugin void FullScreen(:&.Surface=, bool:) = "dll/sdlplugin.dll";
  FullScreen(:.screen=, full:);
  ret !.screen.null();
}

public void showCursor(bool show)
{
  plugin void CursorShow(:bool:) = "dll/sdlplugin.dll";
  CursorShow(:show:);
}

public &GlTexture
{
  uint id = 0;
  delete()
  {
    `clear();
  }
  public void clear()
  {
    plugin void DeleteGlTexture(:uint:) = "dll/sdlplugin.dll";
    DeleteGlTexture(:`id:);
    `id = 0x0;
  }
  public bool load8bitTexture(^ubyte pxl, ushort w, ushort h)
  {
    plugin uint Load8bitTexture(:ubyte=, ushort, ushort:) =
      "dll/sdlplugin.dll";
    if(#pxl == 0 || #pxl != (index)((uint)w*h)) ret false;
    `clear();
    `id = Load8bitTexture(:pxl<>=, w, h:);
    ret `id != 0x0;
  }
}

plugin void MugenFillGl(:&Rect, uint, int:) = "dll/sdlplugin.dll";
plugin bool InitMugenGl(::) = "dll/sdlplugin.dll";
plugin bool RenderMugenGl(:
  &GlTexture, uint=, int, &Rect=, float, float, &Rect=, float, float, float,
  float, float, int, &Rect=, float, float:) = "dll/sdlplugin.dll";
plugin void GlSwapBuffers(::) = "dll/sdlplugin.dll";

public bool bindGlContext()
{
  plugin bool BindGlContext(::) = "dll/sdlplugin.dll";
  bool result;
  lock(.glContextBinded){
    if(result = BindGlContext(::)) .glContextBinded<> = true;
  }
  ret result;
}

public bool unbindGlContext()
{
  plugin bool UnbindGlContext(::) = "dll/sdlplugin.dll";
  bool result;
  lock(.glContextBinded){
    if(UnbindGlContext(::)) .glContextBinded<> = false;
    result = !.glContextBinded<>;
  }
  ret result;
}

public &UseGlContext
{
  new()
  {
    loop{while; do: .th.sleep(0x1); while !.bindGlContext():}
  }
  delete()
  {
    .unbindGlContext();
  }
}

