
lib file = <file.ssz>;
lib s = <string.ssz>;
lib mat = <math.ssz>;
lib consts = <consts.ssz>;
lib tbl = <table.ssz>;
lib sdl = <alpha/sdlplugin.ssz>;
lib cfg = "config.ssz";
lib sff = "sff.ssz";
lib com = "common.ssz";

void error(^/char m)
{
  lib al = <alert.ssz>;
  al.alert!.self?(m);
}

public &Font
{
  &CharOffset
  {
    public int ofs;
    public int w;
    public ^&.sff.Sprite img;
  }
  public &.sff.Sprite img;
  %&CharOffset mpl;
  &.tbl.IntTable!char, &CharOffset? map;
  ushort ver, ver2;
  /int sizex = 6;
  /int sizey = 8;
  int spacingx = 0, spacingy = 0;
  int colors = 255;
  int offsetx = 0, offsety = 0;
  public bool loadFile(^/char filename)
  {:<-
    public void def(&.com.Section sc=)
    {
      ^/char data;
      if(#(data = sc.get("size")) > 0){
        .com.readPair!int?(`sizex=, `sizey=, data);
      }
      if(#(data = sc.get("spacing")) > 0){
        .com.readPair!int?(`spacingx=, `spacingx=, data);
      }
      if(#(data = sc.get("colors")) > 0){
        `colors = .mat.min!int?(255)<, .s.sToN!`colors.self?(data);
      }
      if(#(data = sc.get("offset")) > 0){
        .com.readPair!int?(`offsetx=, `offsety=, data);
      }
    }
    public void map(^^/char lines, index i=)
    {
      *.s.ptn_t ptn;
      ptn.compile("%
        g,-1:%
          g,-1:%c: "\t";;%
          cp:%g,1,-1:%nc,0,32:;;;%
          c: "\t";;%
        g,-1:%c: "\t";;%
        g:|%
          cp:%g,1,-1:%nc,0,32:;;;;%
        end:;");
      loop{
        ^/^/char cap;
        char c;
        int ofs = 0;
      do:
        if(#lines[i] > 0 && lines[i][0] == '['){
          i--;
          break, break;
        }
        ptn.search(lines[i][0...s.find(";", lines[i])]);
        cap = ptn.getCap();
        if(#cap == 0) continue;
        branch{
        cond cap[0][0] == '0' && .s.toLowerChar(cap[0][1]) == 'x':
          c = (char)0;
          loop{index i = 2; while; do:
            branch{
            cond .mat.inRange!char?('0', '9', cap[0][i]):
              c = (c<<(char)4) + (cap[0][i] - '0');
            cond .mat.inRange!char?('a', 'f', .s.toLowerChar(cap[0][i])):
              c = (c<<(char)4) + (.s.toLowerChar(cap[0][i]) - 'a' + (char)10);
            else:
              break, break;
            }
            i++;
          while i < #cap[0]:
          }
        else:
          c = cap[0]<>;
        }
        if(#cap >= 2) ofs = .s.sToN!int?(cap[1]);
        `mpl.new[-1];
        `map.set(c, `mpl[#`mpl-1..-1]);
        `mpl[-1].ofs = ofs;
        branch{
        cond #cap >= 3:
          `mpl[-1].w = .s.sToN!int?(cap[2]);
          ofs += `mpl[-1].w - `sizex;
        else:
          `mpl[-1].w = `sizex;
        }
      continue:
        ofs += `sizex;
        i++;
      while i < #lines:
      }
    }
    void section(^^/char lines, index i=)
    {
      ^/char sec = lines[i];
      ^/char secname = .com.sectionName(sec=);
      if(#secname == 0) ret;
      i++;
      if(.s.equ(secname, "map")){
        `loadFile:<-map(lines, i=);
        ret;
      }
      &.com.Section sc.parse(lines, i=);
      branch{
      cond .s.equ(secname, "def"):
        `loadFile:<-def(sc=);
      }
    }
    &.file.File f;
    if(!f.open(filename, "rb")) ret false;
    uint pcxDataOffset, pcxDataLenght;
    uint txtDataOffset, txtDataLenght;
    ubyte ub;
    loop{
      index i = 0;
      %char s;
    do:
      if(!f.read!ubyte?(ub=)) ret false;
      s .= (char)ub;
      i++;
    while i < 12:
      if(!.s.equ(s, "ElecbyteFnt"\0)){
        .error("ElecbyteFntじゃない");
        ret false;
      }
    }
    if(!f.read!ushort?(`ver=)) ret false;
    if(!f.read!ushort?(`ver2=)) ret false;
    if(!f.read!uint?(pcxDataOffset=)) ret false;
    if(!f.read!uint?(pcxDataLenght=)) ret false;
    if(!f.read!uint?(txtDataOffset=)) ret false;
    if(!f.read!uint?(txtDataLenght=)) ret false;
    if(!`img.readHeader(f=, (long)pcxDataOffset)) ret false;
    if(`img.pcxHeader.bpp != 0d8){
      .error("256色じゃない");
      ret false;
    }
    f.seek((long)pcxDataOffset+128, .file.Seek::SET);
    `img.pxl.new((index)pcxDataLenght-128-768);
    f.readAry!ubyte?(`img.pxl);
    loop{
      index i = 0;
      ubyte r, g, b;
      `img.colorPallet.new(256);
    do:
      if(!f.read!ubyte?(r=)) ret false;
      if(!f.read!ubyte?(g=)) ret false;
      if(!f.read!ubyte?(b=)) ret false;
      `img.colorPallet[i] = (uint)r<<0d16 | (uint)g<<0d8 | (uint)b;
      i++;
    while i < 256:
    }
    `img.rleDecode();
    f.seek((long)txtDataOffset, .file.Seek::SET);
    %char buf;
    loop{while; do:
      if(!f.read!ubyte?(ub=)) ret false;
      buf .= (char)ub;
      txtDataLenght--;
    while txtDataLenght > 0x0:
    }
    ^^/char lines = .com.splitLines(buf);
    .s.each!^/char?([void(^/char l=){l=.s.trim(l);}], lines);
    loop{index i = 0; while; do:
      section(lines, i=);
      i++;
    while i < #lines:
    }
    ^^uint pal;
    pal.new(255 / `colors);
    loop{
      index i = 0;
      while;
    do:
      pal[i].new(256);
      .s.copy!uint?(pal[i][0..256-`colors], `img.colorPallet[0..256-`colors]);
      .s.copy!uint?(
        pal[i][256-`colors..256],
        `img.colorPallet[256-`colors*(i+1)..256-`colors*i]);
      i++;
    while i < #pal:
    }
    void copyCharRect(^ubyte dst, int dw, ^/ubyte src, int x, int w, int h)
    {
      loop{index i = 0; while; do:
        .s.copy!ubyte?(dst[dw*i..w*i+dw], src[w*i+x..w*i+x+dw]);
        i++;
      while i < h:
      }
    }
    loop{index i = 0; while; do:
      `mpl[i].img.new(#pal);
      loop{index j = 0; while; do:
        branch{
        cond j == 0:
          `mpl[i].img[j].shareCopy(`img=);
          `mpl[i].img[j].pxl.new(`mpl[i].w * (int)`img.rct.h);
          copyCharRect(
            `mpl[i].img[j].pxl, `mpl[i].w, `img.pxl,
            `mpl[i].ofs, (int)`img.rct.w, (int)`img.rct.h);
        else:
          `mpl[i].img[j].shareCopy(`mpl[i].img[j-1]=);
        }
        `mpl[i].img[j].rct.x = 0;
        `mpl[i].img[j].rct.y = 0;
        `mpl[i].img[j].rct.w = (ushort)`mpl[i].w;
        `mpl[i].img[j].colorPallet = pal[j];
        j++;
      while j < #`mpl[i].img:
      }
      i++;
    while i < #`mpl:
    }
    ret true;
  }
  public int charWidth(char ch)
  {
    if(ch == ' ') ret `sizex;
    ^&`CharOffset m = `map.get(ch);
    if(#m == 0) ret 0;
    ret m~w;
  }
  public int textWidth(^/char txt)
  {
    int w = 0;
    loop{index i = 0; while; do:
      w += `charWidth(txt[i]) + `spacingx;
      i++;
    while i < #txt:
    }
    ret w;
  }
  public ^&.sff.Sprite getCharSpr(int bank, char ch)
  {
    ^&`CharOffset m = `map.get(ch);
    if(#m == 0) ret .consts.null!&.sff.Sprite?();
    ret m~img[bank..bank+1];
  }
  public float drawChar(
    float x, float y, float xscl, float yscl, int bank, char ch)
  {
    if(ch == ' ') ret (float)`sizex * xscl;
    ^&.sff.Sprite spr = `getCharSpr(bank, ch);
    if(#spr == 0 || #spr~pxl == 0) ret 0.0;
    &.sdl.Rect tile.set(0, 0, 0x0, 0x0);
    .sdl.screen.renderMugenZoom(
      .com.scrrect=, 0.0, 0.0, spr~pxl, spr~colorPallet, 0, spr~rct=,
      -x*.com.WidthScale, -y*.com.HeightScale, tile=,
      xscl*.com.WidthScale, xscl*.com.WidthScale, yscl*.com.HeightScale,
      0.0, 0x0, 255, 0, spr~pluginbuf=);
    ret (float)spr~rct.w * xscl;
  }
  public void drawText(
    float x, float y, float xscl, float yscl, int bank, int align, ^/char txt)
  {
    loop{
      index i = 0;
      float dx = x + (float)`offsetx*xscl;
      float dy = y + (float)(`offsety - (`sizey-1))*yscl;
      branch{
      cond align == 0:
        dx -= (float)`textWidth(txt)*xscl*0.5;
      cond align < 0:
        dx -= (float)`textWidth(txt)*xscl;
      }
      while;
    do:
      dx +=
        `drawChar(dx, dy, xscl, yscl, bank, txt[i])
        + (float)`spacingx*xscl;
      i++;
    while i < #txt:
    }
  }
}

