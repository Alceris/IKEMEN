
lib s = <string.ssz>;
lib consts = <consts.ssz>;
lib m = <math.ssz>;
lib sdl = <alpha/sdlplugin.ssz>;
lib cfg = "config.ssz";
lib mes = <alpha/mesdialog.ssz>;
lib tbl = <table.ssz>;
lib file = <file.ssz>;


//チームモードの種類
|TeamMode
{
  Single, Simul, Turns
}

public bool rootact = false;

//Simulでのパワーの共有フラグ
public bool powershare = true;

//コリジョン表示フラグ
public bool clsndraw = false;

//デバッグ表示フラグ
public bool debugdraw = false;

public %%char clipboardText;

public ^bool com;
com.new(4);
com[0] = true;
com[1] = true;
com[2] = true;
com[3] = true;

public bool autolevel = false;

const float WidthScale = (float)cfg.Width / 320.0;
const float HeightScale = (float)cfg.Height / 240.0;

public &sdl.Rect scrrect;
scrrect.set(0, 0, (ushort)cfg.Width, (ushort)cfg.Height);


const float Speed = (float)cfg.GameSpeed / 60.0;

const float P1P3Dist = 32.0;
const float BodyHeight = 60.0;

const float FERR = (float)consts.int_t::MIN;
const int IERR = (int)FERR;


/int tickCount = 0;
int oldTickCount = tickCount-1;
float tickCountF = 0.0;
float nextAddTime = Speed;

const bool tickFrame()
{
  ret .oldTickCount < .tickCount;
}

const bool tickNextFrame()
{
  ret (int)(.tickCountF + .nextAddTime) > .tickCount;
}

public bool addFrameTime(float t)
{
  branch{
    .oldTickCount = .tickCount;
  cond (int).tickCountF > .tickCount:
    .tickCount++;
    ret false;
  cond (int)(.tickCountF += .nextAddTime) > .tickCount:
    .tickCount++;
  }
  .nextAddTime = t;
  ret true;
}


public int brightness = 256;

public float screenleft = 0.0, screenright = 0.0;
public float xmin = 0.0, xmax = 0.0;
public float camerax = 0.0, cameray = 0.0;
public float screenx = 0.0, screeny = 0.0;
public float scrxmin = 0.0, scrxmax = 0.0;
public float zoffset = 0.0;
public float yoffset = 0.0;
public float xoffset = 0.0;
public float scale = 1.0;
public float turbo = Speed;
public int gametime = 0, time = 0;
public int intro = 20;

//ホームチーム 1P:0, 2P:1
public int home = 0;

public int p1mw = 2, p2mw = 2;

//ラウンドNo.
public int round = 1;

//チームモード
public ^int tmode;
tmode.new(2);
tmode[0] = tmode[1] = (int)TeamMode::Single;

//Turnsの人数
public ^int numturns;
numturns.new(2);
numturns[0] = numturns[1] = 2;

public ^int rexisted;
rexisted.new(2);
rexisted[0] = rexisted[1] = 0;

public int p1wins = 0, p2wins = 0, draws = 0;

public int win = -1;

public int nextLine(index i=, ^/char str)
{
  loop{while; do:
    branch{
    cond str[i] == '\n':
      ret 1;
    cond str[i] == '\r':
      if(i+1 < #str && str[i+1] == '\n'){
        i++;
        ret 2;
      }
    break:
      i++;
    }
  while i < #str:
  }
  ret 0;
}

public %^/char splitLines(^/char str)
{
  %^/char spl;
  loop{index i = 0; do:
    spl.new[-1] = str[i..-.nextLine(i=, str)+i];
  while i < #str:
  }
  ret spl;
}

public int atoi(^/char str)
{
  ^/char s = .s.trim(str);
  if(#s == 0) ret 0;
  bool mi = s[0] == '-';
  index i = (int)mi;
  int n = 0;
  loop{while; do:
    if(s[i] < '0' || s[i] > '9') break;
    n = n*10 + (int)(s[i] - '0');
    i++;
  while i < #s:
  }
  if(mi) n *= -1;
  ret n;
}

public ^int csvToAry(^/char csv)
{
  ^^/char spl = .s.split(",", csv);
  ^int ary.new(#spl);
  loop{index i = 0; while; do:
    ary[i] = .atoi(spl[i]);
    i++;
  while i < #ary:
  }
  ret ary;
}

public &IXY
{
  public int x = .IERR, y = .IERR;
  public void set(int x, int y)
  {
    `x = x;
    `y = y;
  }
}

public &FXY
{
  public float x = .FERR, y = .FERR;
  public void set(float x, float y)
  {
    `x = x;
    `y = y;
  }
}

public void readPair<_t>(_t x=, _t y=, ^/char data)
{
  ^_t xy = .s.svToAry!_t?(",", data);
  x = xy[0];
  y = #xy >= 2 ? xy[1] : (_t)0;
}


public &Layout
{
  public &.FXY offset;
  public int displaytime = -2;
  public byte facing = 1;
  public byte vfacing = 1;
  public short layerno = 0;
  public &.FXY scale;
  new()
  {
    `offset.set(0.0, 0.0);
    `scale.set(1.0, 1.0);
  }
  public void read(^/char img, &.Section sc=)
  {
    ^/char data;
    if(#(data = sc.benri(img, "offset")) > 0){
      .readPair!float?(`offset.x=, `offset.y=, data);
    }
    if(#(data = sc.benri(img, "displaytime")) > 0){
      `displaytime = .s.sToN!int?(data);
    }
    if(#(data = sc.benri(img, "facing")) > 0){
      `facing = .s.sToN!int?(data) < 0 ? -1: 1;
    }
    if(#(data = sc.benri(img, "vfacing")) > 0){
      `vfacing = .s.sToN!int?(data) < 0 ? -1: 1;
    }
    if(#(data = sc.benri(img, "layerno")) > 0){
      `layerno = .m.min!int?(2)<, .s.sToN!int?(data);
    }
    if(#(data = sc.benri(img, "scale")) > 0){
      ^float xy = .s.svToAry!float?(",", data);
      `scale.x = xy[0];
      `scale.y = #xy >= 2 ? xy[1] : 1.0;
    }
  }
  public void setup()
  {
    if(`facing < 0) `offset.x += .cfg.LifebarFontScale;
    if(`vfacing < 0) `offset.y += .cfg.LifebarFontScale;
  }
}

public ^char readFileName(^/char f)
{
  ^char tmp;
  .mes.AsciiToLocal(:tmp=, f:);
  ret tmp;
}

^uint workpal;
workpal.new(256);
public &PalFX
{
  public int player;
  public int time;
  public float mulr;
  public float mulg;
  public float mulb;
  public int addr;
  public int addg;
  public int addb;
  public int amplr;
  public int amplg;
  public int amplb;
  public int cycletime;
  public int sintime;
  public float color;
  public int invertall;
  new()
  {
    `clear();
  }
  public void clear()
  {
    `player = -1;
    `time = 0;
    `mulr = 1.0;
    `mulg = 1.0;
    `mulb = 1.0;
    `addr = 0;
    `addg = 0;
    `addb = 0;
    `amplr = 0;
    `amplg = 0;
    `amplb = 0;
    `cycletime = 0;
    `sintime = 0;
    `color = 1.0;
    `invertall = 0;
  }
  public void step()
  {
    if(`time > 0) `time--;
    if(`time != 0 && `cycletime > 0) `sintime = (`sintime+1) % `cycletime;
  }
  public ^uint getFxPal(^uint pal, bool neg)
  {
    void addsubset(uint addc=, uint subc=, int r, int g, int b)
    {
      int ar = 0, ag = 0, ab = 0, sr = 0, sg = 0, sb = 0;
      void bar(int a=, int s=, int c)
      {
        branch{
        cond c < 0:
          s = .m.min!int?(255, -c);
        else:
          a = .m.min!int?(255, c);
        }
      }
      branch{
      cond `neg:
        bar(sr=, ar=, r); bar(sg=, ag=, g); bar(sb=, ab=, b);
      else:
        bar(ar=, sr=, r); bar(ag=, sg=, g); bar(ab=, sb=, b);
      }
      addc = (uint)(ab | ag<<8 | ar<<16);
      subc = (uint)(sb | sg<<8 | sr<<16);
    }
    loop{
      index i = 0;
      uint c;
      float ac;
      float mr, mg, mb;
      branch{
      cond neg:
        mr = (`mulg + `mulb) * 0.5;
        mg = (`mulr + `mulb) * 0.5;
        mb = (`mulr + `mulg) * 0.5;
      else:
        mr = `mulr;
        mg = `mulg;
        mb = `mulb;
      }
      .m.limRange!float?(mr=, 0.0, 2.0);
      .m.limRange!float?(mg=, 0.0, 2.0);
      .m.limRange!float?(mb=, 0.0, 2.0);
      int adr = `addr, adg = `addg, adb = `addb;
      if(`cycletime >= 2){
        float sin =
          .m.sin(
            (
              .m.PI*2.0*(double)`sintime + (neg ? .m.PI : 0.0)
              + (`cycletime == 2 ? .m.PI/2.0 : 0.0)) / (double)`cycletime);
        adr += (int)(sin*(float)`amplr);
        adg += (int)(sin*(float)`amplg);
        adb += (int)(sin*(float)`amplb);
      }
      uint addc, subc;
      addsubset(
        addc=, subc=, (int)((float)adr*mr),
        (int)((float)adg*mg), (int)((float)adb*mb));
      uint tmp, msk;
    do:
      c = pal[i];
      if(`invertall != 0) c = !c;
      ac = (float)((c&0xff)+(c>>0d8&0xff)+(c>>0d16&0xff)) * (1.0/3.0);
      tmp = (uint)(((float)(c&0xff) + (ac-(float)(c&0xff))*(1.0-`color)) * mb);
      tmp =
        ((tmp | (uint)(((int)tmp<<23)>>31)) & 0xff)
        | (
          (uint)(
            (
              (float)(c>>0d8&0xff)
              + (ac-(float)(c>>0d8&0xff))*(1.0-`color))*mg) << 0d8);
      tmp =
        ((tmp | (uint)(((int)(tmp&0x10000)<<15)>>23)) & 0xffff)
        | (
          (uint)(
            (
              (float)(c>>0d16&0xff)
              + (ac-(float)(c>>0d16&0xff))*(1.0-`color))*mr) << 0d16);
      c = tmp | (uint)(((int)(tmp&0x1000000)<<7)>>15);
      tmp = ((c & addc) + (((c ^ addc) >> 0d1) & 0x7f7f7f7f)) & 0x80808080;
      msk = (tmp << 0d1) - (tmp >> 0d7);
      c = ((c + addc) - msk) | msk;
      tmp = (((!c & subc) << 0d1) + ((!c ^ subc) & 0xfefefefe)) & 0x01010100;
      msk = tmp - (tmp >> 0d8);
      c = (c - subc + tmp) & !msk;
      .workpal[i] = c;
    while ++i < 256:
    }
    ret .workpal;
  }
}

public ^&PalFX allPalFX;
allPalFX.new(1);


public bool loadFile(^/char deffile, ^/char file=, ~$bool(^/char) load)
{
  loop{index i = #deffile-1; while; do:
    if(.s.cMatch!char?("\/", deffile[i])){
      %char buf;
      buf .= deffile[0..i+1];
      buf .= file;
      if(load(:buf:)){
        file = buf;
        break, break, break;
      }
    }
    i--;
  while i >= 0:
    {
      %char buf;
      buf .= "data/";
      buf .= file;
      if(load(:buf:)){
        file = buf;
        break, break, break;
      }
      buf.new(0);
      buf .= "ssz/";
      buf .= file;
      if(load(:buf:)){
        file = buf;
        break, break, break;
      }
    }
    if(!load(:file:)) ret false;
  }
  ret true;
}

public &Section
{
  &.tbl.NameTable!char? params;
  public void parse(^^/char lines, index i=)
  {
    loop{
      index f;
      ^/char line;
      while;
    do:
      if(#lines[i] > 0 && lines[i][0] == '['){
        if(.s.find("]", lines[i]) < 0) break, continue;
        i--;
        break, break;
      }
      line = lines[i][0...s.find(";", lines[i])];
      f = .s.find("=", line);
      if(f > 0){
        ^/char name =
          .s.toLower()<, .s.trim()<,
          .s.join(" ")<, .s.split(\x81\x40)<, line[0..f];
        if(#name > 0){
          ^/char data = .s.trim(line[f+1..-1]);
          if(#data == 0) break;
          if(data[0] == '"') data = data[1...s.find(\", data[1..-1])+1];
          if(#`params.get(name) == 0) `params.set(name, .s.clone!char?(data));
        }
      }
    continue:
      i++;
    while i < #lines:
    }
  }
  public ^/char get(^/char name)
  {
    ret `params.get(name);
  }
  public ^/char benri(^/char head, ^/char name)
  {
    %char buf;
    ret `params.get(buf .= head .= name);
  }
}

public ^/char sectionName(^/char sec=)
{
  if(#sec == 0 || sec[0] != '[') ret "";
  index f = .s.find("]", sec);
  if(f < 0) ret "";
  sec = sec[1..f];
  index fnd = .s.cFind(" "\t, sec);
  ^/char secname = .s.toLower()<, sec[0..fnd];
  if(fnd >= 0) loop{while; do:
    fnd++;
  while fnd < #sec && .s.cMatch!char?(" "\t, sec[fnd]):
  }
  sec = sec[fnd..-1];
  ret secname;
}

public &FrameActionMethod<_t>
{
  public void _t::action(`anim_t ani=)
  {
    ani.time++;
    if(`time >= 0 && ani.time >= `time){
      ani.time = 0;
      ani.newframe = true;
      loop{do:
        ani.current++;
      while ani.frames[ani.current].time == 0 && ani.current < #ani.frames:
      }
      if(ani.current >= #ani.frames) branch{
        ani.repeatcnt++;
      cond ani.nrepeat >= 0 && ani.repeatcnt >= ani.nrepeat:
        ani.current = 0;
        ani.repeatcnt = 0;
      else:
        ani.current =
          @m.max!index?(0)<, @m.min!index?(#ani.frames-1)<, ani.loopstart;
      comm:
        ani.loopend = true;
      }
    }
  }
}



public &SuperDangerousRef
{
  public index p, pos, l;
  public void copyRef<_t>(^_t r=)
  {
    .mes.veryUnsafeCopy!`self, ^_t?(`=, r=);
  }
  public void copyList<_t>(%_t r=)
  {
    .mes.veryUnsafeCopy!`self, %_t?(`=, r=);
  }
  public void copyToRef<_t>(^_t r=)
  {
    .mes.veryUnsafeCopy!^_t, `self?(r=, `=);
  }
  public void copyToList<_t>(%_t r=)
  {
    .mes.veryUnsafeCopy!%_t, `self?(r=, `=);
  }
}

